/*
** EPITECH PROJECT, 2021
** include [WSL: Ubuntu]
** File description:
** scene.h
*/

#ifndef SCENE_H
    #define SCENE_H

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////

    #include "../game_engine.h"

////////////////////////////////////////////////////////////
/// Pas besoin d'explication pour celle-ci désolé
////////////////////////////////////////////////////////////
bool init_scenes_path(const char *path, engine_t *engine);

////////////////////////////////////////////////////////////
/// Pas besoin d'explication pour celle-ci désolé
////////////////////////////////////////////////////////////
bool init_scene_path(const char *path, const char *name, engine_t *engine);

////////////////////////////////////////////////////////////
/// \brief permet de changer de scene permit les scènes contenu
/// dans le dossier map
///
/// \param name le nom de la map !Sans le dossier!
///
/// \return return si il a réussi ou non (de toute façon si il y arrive pas
/// il quitte le jeu tout seul)
///
////////////////////////////////////////////////////////////
int change_scene(char const *name, engine_t *engine);

////////////////////////////////////////////////////////////
/// Pas besoin d'explication pour celle-ci désolé
////////////////////////////////////////////////////////////
sfBool set_const_scene(char const *name, engine_t *engine);

////////////////////////////////////////////////////////////
/// Pas besoin d'explication pour celle-ci désolé
////////////////////////////////////////////////////////////
scene_t *load_scene_by_path(char const *path, engine_t *engine);

////////////////////////////////////////////////////////////
/// Function système
////////////////////////////////////////////////////////////
list_t *init_objects_list(list_t *object, engine_t *engine, object_t *parent);

////////////////////////////////////////////////////////////
/// Function système
////////////////////////////////////////////////////////////
scene_t *init_scene_by_list(list_t *scene_list, engine_t *engine);

////////////////////////////////////////////////////////////
/// Function système
////////////////////////////////////////////////////////////
int destroy_scene(scene_t *scene);

////////////////////////////////////////////////////////////
/// Function système
////////////////////////////////////////////////////////////
int destroy_objects_list(list_t *scene);

////////////////////////////////////////////////////////////
/// Function système
////////////////////////////////////////////////////////////
bool init_buffer(list_t *buffer, scene_t *scene);

////////////////////////////////////////////////////////////
/// Function système
////////////////////////////////////////////////////////////
bool destroy_buffer(list_t *buffer);

////////////////////////////////////////////////////////////
/// \brief retourne le buffer en question, qui a était initialiser
/// pendant le chargement de la scène
///
/// \param name Le nom de la scène
/// \param id le type de buffer (vous avez des define dans le game_engine.h)
///
/// \return return le buffer si il l'a pas trouvé il return null
///
////////////////////////////////////////////////////////////
void *get_item_buffer(object_t *object, int id, const char *name);

////////////////////////////////////////////////////////////
/// Avant d'initialiser des buffers je préfère que vous venez me voir
////////////////////////////////////////////////////////////
bool init_color(scene_t *scene, list_t *list);
bool init_font(scene_t *scene, list_t *list);
bool init_texture(scene_t *scene, list_t *list);
bool init_soundbuffer(scene_t *scene, list_t *list);
bool init_music(scene_t *scene, list_t *list);

#endif
